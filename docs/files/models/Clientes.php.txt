<?php
/**
*  Modelo que permite interactuar con los Clientes.
*
*  Se debe utilizar para obtener informacion de Clientes, dar nuevos Clientes
*  de alta, y verificar la información de login los Clientes.
*/
class Clientes extends Model {
    /**
    *  Da de alta un nuevo Cliente utilizando los parámetros provistos.
    *
    *@param string $nombre Nombre(s) de pila.
    *@param string $apellido Apellido(s).
    *@param string $tipoDoc Tipo de documento.
    *@param string $numDoc Número de documento.
    *@param string $domicilio Domicilio.
    *@param string $telefono Número de teléfono.
    *@param string $email Dirección de e-mail.
    *@param string $pass Contraseña. Luego cifrada con SHA-1.
    */
    public function alta($nombre, $apellido, $tipoDoc, $numDoc, $domicilio, $telefono, $email, $pass) {
        //TODO validacion de datos
        $nombre = $this->db->escapeString($nombre);
        $apellido = $this->db->escapeString($apellido);
        $tipoDoc = $this->db->escapeString($tipoDoc);
        $numDoc = $this->db->escapeString($numDoc);
        $domicilio = $this->db->escapeString($domicilio);
        $telefono = $this->db->escapeString($telefono);
        $email = $this->db->escapeString($email);
        if (strlen($nombre) > 50 ||
            strlen($apellido) > 50 ||
            strlen($tipoDoc) > 10 ||
            strlen($numDoc) > 20 ||
            strlen($domicilio) > 200 ||
            strlen($telefono) > 20 ||
            strlen($email) > 100) die("string too long");
        $sha = sha1($pass);
        $this->db->query("INSERT INTO clientes
            (nombre, apellido, tipo_documento, num_documento, domicilio, telefono, email, password)
            VALUES('$nombre', '$apellido', '$tipoDoc', '$numDoc', '$domicilio', '$telefono', '$email', '$sha');");
    }
    /**
    *  Obtiene los datos del Cliente con el e-mail y contraseña pasados como parámetros.
    *  Usado principalmente para obtener el ID del Cliente que intenta loguearse.
    *
    *@param string $email Dirección de e-mail.
    *@param string $pass Contraseña. Luego cifrada con SHA-1.
    *@return array Datos del Cliente. Retorna NULL si el login es incorrecto o el Cliente no existe.
    */
    public function login($email, $pass) {
        $email = $this->db->escapeString($email);
        if (strlen($email) > 100) die("string too long");
        $sha = sha1($pass);
        $this->db->query("SELECT * FROM clientes WHERE email = '$email' and password =  '$sha' LIMIT 1");
        if ($this->db->numRows() > 0) {
            return $this->db->fetch();
        } else {
            return NULL;
        }
    }
    /**
    *  Retorna el/los nombre/s de pila del cliente con el ID pasado por parámetro.
    *
    *@param integer $id ID del cliente.
    *@return string Nombre(s) de pila del Cliente. Retorna NULL si no existe un cliente con el ID dado.
    */
    public function getNombre($id) {
        if (!ctype_digit($id)) die("bad id");
        $this->db->query("SELECT nombre FROM clientes WHERE id_cliente = $id LIMIT 1");
        if ($this->db->numRows() > 0) {
            $r = $this->db->fetch();
            return $r['nombre'];
        } else {
            return NULL;
        }
    }
    /**
    *  Retorna el/los apellido/s del cliente con el ID pasado por parámetro.
    *
    *@param integer $id ID del cliente.
    *@return string Apellido(s) del Cliente. Retorna NULL si no existe un cliente con el ID dado.
    */
    public function getApellido($id) {
        if (!ctype_digit($id)) die("bad id");
        $this->db->query("SELECT apellido FROM clientes WHERE id_cliente = $id LIMIT 1");
        if ($this->db->numRows() > 0) {
            $r = $this->db->fetch();
            return $r['apellido'];
        } else {
            return NULL;
        }
    }
    /**
    *  Retorna el nombre completo (nombre/s y apellido/s) del cliente con el ID pasado por parámetro.
    *
    *@param integer $id ID del cliente.
    *@return string Nombre completo del Cliente. Retorna NULL si no existe un cliente con el ID dado.
    */
    public function getFullName($id) {
        if (!ctype_digit($id)) die("bad id");
        return $this->getNombre($id) . ' ' . $this->getApellido($id);
    }

}

